\ProvidesPackage{scheduling}
\RequirePackage{tikz}
\RequirePackage{xargs}
\RequirePackage{ifthen}

\DeclareOptionX{tasknot}{%
    \def\TaskNotOpt{#1}%
}

\DeclareOptionX{resanot}{%
    \def\ResaNotOpt{#1}%
}

\DeclareOptionX{dashedpercent}{%
    \def\DashedPercentOpt{#1}%
}

\ExecuteOptionsX{tasknot=T}
\ExecuteOptionsX{resanot=R}
\ExecuteOptionsX{dashedpercent=0.05}

\ProcessOptionsX

\newcounter{task}
\newcounter{resa}
\newcounter{hole}
\newcounter{phase}

\newcommand{\tlabel}{nolabel}
\newcommand{\ArgI}{M}
\newcommand{\ArgII}{1}

\newboolean{setabs}
\setboolean{setabs}{true}
\newcommand{\toggleonabs}[0]{\setboolean{setabs}{true}}
\newcommand{\toggleoffabs}[0]{\setboolean{setabs}{false}}

\newboolean{infmachine}
\setboolean{infmachine}{false}
\newcommandx{\toggleoninfmach}[1][1=1]{
    \setboolean{infmachine}{true}
    \renewcommand{\ArgII}{#1}
}
\newcommand{\toggleoffinfmach}[0]{\setboolean{infmachine}{false}}

\newboolean{contour}
\setboolean{contour}{false}
\newcommand{\toggleoncontour}[0]{\setboolean{contour}{true}}
\newcommand{\toggleoffcontour}[0]{\setboolean{contour}{false}}

\newcommandx{\notations}[1][1=M]{
    \renewcommand{\ArgI}{#1}
}

% <<< Nombre fixé de machines (initialisation des abscisses à 0)
\newenvironmentx{ordo}[9][1=12, 5=1, 6=0, 7=0, 8=1, 9=n, usedefault]
% 1 : Longueur Max en cm
% 2 : Nbre de machines
% 3 : Pas en abscisse
% 4 : xmax
% 5 : Hauteur d'une ligne
% 6 : Début de la numérotation des machines
% 7 : Début de la numérotation en abscisse
% 8 : Scale
{
    \setcounter{task}{0}
    \setcounter{resa}{0}
    \setcounter{hole}{0}
    \setcounter{phase}{0}

    \begin{tikzpicture}[>=latex,every node/.style={transform shape}, scale=#8]
 
    % Si la taille de l'ordo est fixée alors on calcule l'épaisseur d'une ligne, sinon on la
    % fixe à 1
    \pgfmathparse{#5} \let\RowHeight\pgfmathresult
    % Nombre de machines
    \pgfmathparse{#2} \let\NbMachines\pgfmathresult
    % Début de numérotation
    \IfDecimal{#7}{\pgfmathparse{#7} \let\FirstNum\pgfmathresult}{\pgfmathparse{0} \let\FirstNum\pgfmathresult}

    \ifthenelse{\equal{#9}{n}}
    {\def\contour{0}}
    {\def\contour{1}}

    % Calcul de la longueur d'un pointillé
    \pgfmathparse{#1 * \DashedPercentOpt} \let\DashLength\pgfmathresult

    % Calcul de la largeur utile (largeur de l'image demandées - 10% pour les pointillés)
    \pgfmathparse{#1 - 2 * \DashLength} \let\RealPictLength\pgfmathresult

    % Calcul de la longueur d'une unité
    \pgfmathparse{\RealPictLength / #4} \let\UnitXLength\pgfmathresult

    % Calcul de la longueur d'un pas
    \pgfmathparse{\UnitXLength * #3} \let\StepLength\pgfmathresult

    % Calcul du nombre de pas
    \pgfmathparse{int(#4/#3)} \let\NbSteps\pgfmathresult

    % Abscisse réelle de la fin du diagramme
    \let\EndX\RealPictLength

    % Ordonnée de la ligne haute de l'instance
    \pgfmathparse{#2*\RowHeight} \let\EndY\pgfmathresult

    % Largeur des événements (phases, jobs, réservations, \ldots)
    \pgfmathparse{0.8 * \RowHeight} \let\EventWidth\pgfmathresult

    \draw[thick] (\EndX,0) -- (0,0) -- (0,\EndY) -- (\EndX,\EndY);
    \draw[thick,dashed] (\EndX,0) -- (\EndX+\DashLength,0);
    \draw[thick,dashed] (\EndX,\EndY) -- (\EndX+\DashLength,\EndY);

    \draw[thick,dashed] (0,0) -- (0-\DashLength,0);
    \draw[thick,dashed] (0,\EndY) -- (0-\DashLength,\EndY);

    \node[below] at (0, 0) {{\scriptsize$#7$}};

    \foreach \x in {1,...,\NbSteps}{
        \pgfmathparse{\x * \StepLength} \let\abscisse\pgfmathresult
        \pgfmathparse{int(\x * #3)} \let\xlabel\pgfmathresult

        % TODO Faire le test est un nombre
        \IfDecimal{#7}
        {
            \pgfmathparse{int(\xlabel + #7)} \let\supxlab\pgfmathresult
            \node[below] at (\abscisse, 0) {{\scriptsize$\supxlab$}};
        }
        {\node[below] at (\abscisse, 0) {{\scriptsize$#7 + \xlabel$}};}

        \draw[dotted] (\abscisse,0) to (\abscisse,\EndY);
    }

    %\pgfmathparse{(\nbpas + 0.7) * \xpas} \let\abscisse\pgfmathresult
    %\node[above] at (\abscisse, -0.4) {$\dots$};

    \foreach \y in {1,...,#2}{
        \pgfmathparse{\y * \RowHeight} \let\ordmachine\pgfmathresult
        \pgfmathparse{\ordmachine - (0.5*\RowHeight)} \let\ordlabel\pgfmathresult

        \ifthenelse{\equal{\y}{1}}
        {\node[left] at (0, \ordlabel) {${\ArgI}_{#6}$};}
        {
            \pgfmathparse{int(\y - 1)} \let\ylabel\pgfmathresult
            % TODO Tester s'il s'agit d'un entier
            \IfDecimal{#6}
            {
                \pgfmathparse{int(#6 + \ylabel)} \let\ysuplabel\pgfmathresult
                \node[left] at (0, \ordlabel) {${\ArgI}_{\ysuplabel}$};
            }
            {\node[left] at (0, \ordlabel) {${\ArgI}_{#6 + \ylabel}$};}
        }
        \draw[dotted] (0, \ordmachine) to (\EndX + \DashLength, \ordmachine);
    }
}
{
    \end{tikzpicture}
    \renewcommand{\ArgI}{M}
    \toggleonabs
    \toggleoffcontour
    \toggleoffinfmach
}
% >>>
% <<< k machines k non fixé
%\newenvironmentx{ordo}[7][1=12, 5=a, 6=0, 7=0]
% 1 : Longueur Max en cm
% 2 : Nbre de machines
% 3 : Pas en abscisse
% 4 : xmax
% 5 : Largeur Max
% 6 : Début de la numérotation des machines
% 7 : Début de la numérotation en abscisse
\newenvironmentx{ordok}[7][1=12, 5=1, 6=0, 7=0]
% 1 : Max
% 2 : Nbre de machines avant ...
% 3 : Pas en abscisse
% 4 : xmax
% 5 : Largeur max
{
    \setcounter{task}{0}
    \setcounter{resa}{0}
    \setcounter{hole}{0}
    \setcounter{phase}{0}
    \begin{center}
    \begin{tikzpicture}[>=latex]
        \def\RowHeight{#5}
 
        % Calcul de la longueur d'un pointillé
        \pgfmathparse{#1 * \DashedPercentOpt} \let\DashLength\pgfmathresult

        % Calcul de la largeur utile (largeur de l'image demandées - 10% pour les pointillés)
        \pgfmathparse{#1 - 2 * \DashLength} \let\RealPictLength\pgfmathresult

        % Calcul de la longueur d'une unité
        \pgfmathparse{\RealPictLength / #4} \let\UnitXLength\pgfmathresult

        % Calcul de la longueur d'un pas
        \pgfmathparse{\UnitXLength * #3} \let\StepLength\pgfmathresult

        % Calcul du nombre de pas
        \pgfmathparse{int(#4/#3)} \let\NbSteps\pgfmathresult

        % Abscisse réelle de la fin du diagramme
        \let\EndX\RealPictLength

        % Largeur du jeu de machines
        \pgfmathparse{#2 *\RowHeight} \let\MachineHeight\pgfmathresult

        % Ordonnée de la ligne haute de l'instance
        \pgfmathparse{(#2 + 2)*\RowHeight} \let\EndY\pgfmathresult

        \draw[thick] (\EndX,0) -- (0,0) -- (0,\EndY) -- (\EndX,\EndY);
        \draw[thick,dashed] (\EndX,0) -- (\EndX+\DashLength,0);
        \draw[thick,dashed] (\EndX,\EndY) -- (\EndX+\DashLength,\EndY);

        \draw[thick,dashed] (0,0) -- (0-\DashLength,0);
        \draw[thick,dashed] (0,\EndY) -- (0-\DashLength,\EndY);

        \node[below] at (0, 0) {$#7$};

        \foreach \x in {1,...,\NbSteps}{
            \pgfmathparse{\x * \StepLength} \let\abscisse\pgfmathresult
            \pgfmathparse{int(\x * #3)} \let\xlabel\pgfmathresult

            \node[below] at (\abscisse, 0) {$\xlabel$};
            \draw[dotted] (\abscisse,0) to (\abscisse,\MachineHeight);
            \draw[dotted] (\abscisse,\MachineHeight+1) to (\abscisse,\EndY);
        }

        %\pgfmathparse{(\nbpas + 0.7) * \xpas} \let\abscisse\pgfmathresult
        %\node[above] at (\abscisse, -0.4) {$\dots$};

        \foreach \y in {1,...,#2}{
            \pgfmathparse{\y * \RowHeight} \let\ordmachine\pgfmathresult
            \pgfmathparse{\ordmachine - (0.5*\RowHeight)} \let\ordlabel\pgfmathresult

            \node[left] at (0, \ordlabel) {$M_\y$};
            \draw[dotted] (0, \ordmachine) to (\EndX + \DashLength, \ordmachine);
        }

        \pgfmathparse{\RowHeight*0.6}\let\temporaryvariable\pgfmathresult
        \node[left] at (0, \MachineHeight + \temporaryvariable) {$\vdots$};
        \pgfmathparse{\EndY - 0.5*\RowHeight}\let\temporaryvariable\pgfmathresult
        \node[left] at (0, \temporaryvariable) {$k$};
        \pgfmathparse{\EndY - \RowHeight}\let\temporaryvariable\pgfmathresult
        \draw[dotted]  (0, \temporaryvariable) to (\EndX+\StepLength, #2 + 1);
}
{\end{tikzpicture}\end{center}}
% >>>
% <<< \newphase[label]{duree}{machine}{début}
% TODO Vérifier que le nombre de machines est suffisant
\newcommand{\newphase}[4][n]{
    % 1 : Label de la tâche
    % 2 : Durée de la tâche
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{phase}{1}
    \renewcommand{\tlabel}{$\iephase{\thephase}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{(#4 - \FirstNum)*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.9*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\StepLength} \let\PhaseLength\pgfmathresult

    %\fill[black!30] (\initx, \InitY) rectangle +(\longx, \EventWidth);
    \draw[-, dashed] (\InitX, 0) to (\InitX, \InitY + \EventWidth);
    \draw[-, dashed] (\InitX + \PhaseLength, 0) to (\InitX + \PhaseLength, \InitY + \EventWidth);
    \node at (\InitX + \PhaseLength/2, \InitY + \EventWidth/2) {{\scriptsize\tlabel}};
}
% >>>
% <<< \newtask[label]{duree}{machine}{début}
% TODO Vérifier que le nombre de machines est suffisant
\newcommandx{\newtask}[6][1=n,5=black!30, 6=black, usedefault]{
    % 1 : Label de la tâche
    % 2 : Durée de la tâche
    % 3 : Numéro de machine
    % 4 : Date de début
    % 5 : Couleur
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{task}{1}
    \renewcommand{\tlabel}{$\TaskNotOpt_{\thetask}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{(#4 - \FirstNum)*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.9*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\JobLength\pgfmathresult

    \fill[#5] (\InitX, \InitY) rectangle +(\JobLength, \EventWidth);
    \ifthenelse{\equal{\contour}{1}}{
        \draw[#6] (\InitX, \InitY) rectangle +(\JobLength, \EventWidth);
    }{}
    \node[#6] at (\InitX + \JobLength/2, \InitY + \EventWidth/2) {{\scriptsize\tlabel}};
}
% >>>
% <<< \newunschedtask[label]{duree}{début}[ligne][bgcolor][fgcolor]
\newcommandx{\newunschedtask}[6][1=n, 4=1, 5=black!30, 6=black, usedefault]{
    % 1 : Label de la tâche
    % 2 : Durée de la tâche
    % 3 : Date de début
    % 4 : N° de ligne au dessus de la grille
    % 5 : Couleur de fond
    % 6 : Couleur de police
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{task}{1}
    \renewcommand{\tlabel}{$\TaskNotOpt_{\thetask}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{(#3 - \FirstNum)*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#4 + \NbMachines - 0.9) * \RowHeight}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\JobLength\pgfmathresult

    \fill[#5] (\InitX, \InitY) rectangle +(\JobLength, \EventWidth);
    \ifthenelse{\equal{\contour}{1}}{
        \draw[#6] (\InitX, \InitY) rectangle +(\JobLength, \EventWidth);
    }{}
    \node[#6] at (\InitX + \JobLength/2, \InitY + \EventWidth/2) {{\scriptsize\tlabel}};
}
% >>>
% <<< \newhyptask[label]{duree}{machine}{début}
% TODO Vérifier que le nombre de machines est suffisant
\newcommand{\newhyptask}[3]{
    % 1 : Durée de la tâche
    % 2 : Numéro de machine
    % 3 : Date de début
    
    \pgfmathparse{(#3 - \FirstNum)*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#2-0.9)*\RowHeight}       \let\InitY\pgfmathresult
    \pgfmathparse{#1*\UnitXLength} \let\HypTaskLength\pgfmathresult

    \draw[dashed] (\InitX, \InitY) rectangle +(\HypTaskLength, \EventWidth);
}
% >>>
% <<< \newunschedjob[label]{duree}{release}{deadline}{upline}[bgcolor][fgcolor]
\newcommandx{\newunschedjob}[7][1=n,6=black!30, 7=black, usedefault]{
    % 1 : Label
    % 2 : Processing time
    % 3 : Release Date
    % 4 : Deadline
    % 5 : Position above the machines
    % 6 : Background color
    % 7 : Foreground color

    % Label
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{task}{1}
    \renewcommand{\tlabel}{$\TaskNotOpt_{\thetask}$}}
    {\renewcommand{\tlabel}{#1}}

    % Real Deadline (la deadline est le dernier créneau auquel on peut schéduler la tâche => le
    % créneau doit être couvert d'où le +1)
    \pgfmathparse{#4 + 1 - \FirstNum} \let\RealDeadLine\pgfmathresult

    % Release Date
    \pgfmathparse{(#3 - \FirstNum) * \UnitXLength} \let\ReleaseDate\pgfmathresult
    % Deadline
    \pgfmathparse{\RealDeadLine * \UnitXLength} \let\DeadLine\pgfmathresult
    % Processing Time
    \pgfmathparse{#2 * \UnitXLength} \let\JobLength\pgfmathresult

    % Milieu de la tâche 
    \pgfmathparse{((#3 - \FirstNum + \RealDeadLine)/2) * \UnitXLength} \let\MiddleRectangle\pgfmathresult
    % Abscisse des coins gauches de la tâche
    \pgfmathparse{\MiddleRectangle - (#2 * \UnitXLength / 2)} \let\AbsLeftCorner\pgfmathresult
    % Abscisse des coins droits de la tâche
    \pgfmathparse{\MiddleRectangle + (#2 * \UnitXLength / 2)} \let\AbsRightCorner\pgfmathresult
    % Ordonnée des coins inférieurs de la tâche
    \pgfmathparse{(#5 + \NbMachines -0.9)*\RowHeight}       \let\OrdDownCorner\pgfmathresult
    % Ordonnée de la ligne de schedule
    \pgfmathparse{(#5 + \NbMachines - 0.5)*\RowHeight} \let\OrdLineReleaseDead\pgfmathresult

    \fill[#6] (\AbsLeftCorner, \OrdDownCorner) rectangle +(\JobLength, \EventWidth);
    \ifthenelse{\equal{\contour}{1}}{
        \draw[#7] (\AbsLeftCorner, \OrdDownCorner) rectangle +(\JobLength, \EventWidth);
    }{}
    \node[#7] at (\MiddleRectangle, \OrdLineReleaseDead) {{\scriptsize\tlabel}};

    \draw[<-, >=latex] (\ReleaseDate, \OrdLineReleaseDead) to (\AbsLeftCorner, \OrdLineReleaseDead);
    \draw[->, >=latex] (\AbsRightCorner, \OrdLineReleaseDead) to (\DeadLine, \OrdLineReleaseDead);
}
%>>>
% <<< \newresa[label]{duree}{machine}{debut}
\newcommandx{\newresa}[6][1=n, 5=black, 6=white, usedefault]{
    % 1 : Label de la réservation
    % 2 : Durée de la réservation
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{resa}{1}
    \renewcommand{\tlabel}{$R_{\theresa}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{(#4 - \FirstNum)*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.9*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\ResaLength\pgfmathresult

    \fill[#5] (\InitX, \InitY) rectangle +(\ResaLength, \EventWidth);
    \ifthenelse{\equal{\contour}{1}}{
        \draw[#6] (\InitX, \InitY) rectangle +(\ResaLength, \EventWidth);
    }{}
    \node[#6] at (\InitX + \ResaLength/2, \InitY + \EventWidth/2) {{\scriptsize\tlabel}};
}
% >>>
% <<< \newhole[label]{duree}{machine}{debut}
\newcommand{\newhole}[4][n]{
    % 1 : Label du trou
    % 2 : Durée du trou
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$H_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.8*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\HoleLength\pgfmathresult

    \node at (\InitX + \HoleLength/2, \InitY + 0.35*\RowHeight) {{\scriptsize\tlabel}};
    \draw[<->] (\InitX, \InitY) to (\InitX + \HoleLength, \InitY);
}
% >>>
% <<< \newbeghole[label]{duree}{machine}
\newcommand{\newbeghole}[3][n]{
    % 1 : Label du trou
    % 2 : Durée du trou
    % 3 : Numéro de machine
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$H_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{0*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.8*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\BegHoleLength\pgfmathresult

    \node at (\InitX + \BegHoleLength/2, \InitY + 0.35*\RowHeight) {{\scriptsize\tlabel}};
    \draw[->] (\InitX, \InitY) to (\InitX + \BegHoleLength, \InitY);
    \draw[-,dashed] (\InitX - 1, \InitY) to (\InitX, \InitY);
}
% >>>
% <<< \newendhole[label]{duree}{machine}{debut}
\newcommand{\newendhole}[4][n]{
    % 1 : Label du trou
    % 2 : Durée du trou
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$H_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#3*\RowHeight)-(0.8*\RowHeight)}       \let\InitY\pgfmathresult
    \pgfmathparse{#2*\UnitXLength} \let\EndHoleLength\pgfmathresult

    
    \node at (\InitX + \EndHoleLength/2, \InitY + 0.35*\RowHeight) {{\scriptsize\tlabel}};
    \draw[<-] (\InitX, \InitY) to (\InitX + \EndHoleLength, \InitY);
    \draw[-,dashed] (\InitX + \EndHoleLength, \InitY) to (\InitX + \EndHoleLength + 2*\UnitXLength, \InitY);
}
% >>>
% <<< \adjust{nbmachine}{debmachine}
\newcommand{\adjust}[2]{
    \pgfmathparse{(#1-0.2)*\RowHeight}       \let\longy\pgfmathresult
    \pgfmathparse{(#2-0.9)*\RowHeight}       \let\InitY\pgfmathresult

    \fill[black!0] (0, \InitY) rectangle +(1, \longy);
}
% >>>
% <<< \newline[color]{time}{label}{height}
\newcommand{\newtline}[4][black]{
    % 1 : Label de la tâche
    % 2 : Durée de la tâche
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \pgfmathparse{#2*\UnitXLength} \let\InitX\pgfmathresult
    \pgfmathparse{(#4*\RowHeight)}       \let\InitY\pgfmathresult

    %\fill[black!30] (\InitX, \InitY) rectangle +(\longx, \EventWidth);
    \draw[-, thick, dashed, #1] (\InitX, 0) to (\InitX, \InitY);
    \node[#1] at (\InitX, \InitY + 0.6*\RowHeight) {#3};
}

\newcommandx{\newvertline}[4][4={-,black}, usedefault]{
    \pgfmathparse{(#2 - #1 + 0.2) * \RowHeight} \let\linelength\pgfmathresult
    \pgfmathparse{(#2 + 0.1 - 1) * \RowHeight} \let\upbound\pgfmathresult
    \pgfmathparse{(#1 - 0.1) * \RowHeight} \let\lowbound\pgfmathresult
    \pgfmathparse{(#3 + 0.5) * \UnitXLength} \let\timeline\pgfmathresult

    \draw[#4] (\timeline, \lowbound) to (\timeline, \upbound);
}
% >>>


% <<< Taches
%% Début d'une tâche
\newcommand{\st}[1]{ r_{#1} }
\newcommand{\ste}[1]{ r^{\mathcal{\TaskNotOpt}}_{#1} }
%% Fin d'une tâche
\newcommand{\ct}[1]{ d_{#1} }
\newcommand{\cte}[1]{ d^{\mathcal{\TaskNotOpt}}_{#1} }
%% Durée d'une tâche
\newcommand{\pt}[1]{ p_{#1} }
\newcommand{\pte}[1]{ p^{\mathcal{\TaskNotOpt}}_{#1} }
% >>>
% <<< Resa
%% Début d'une réservation
\newcommand{\sres}[1]{ r_{#1} }
\newcommand{\srese}[1]{ r^{\mathcal{R}}_{#1} }
%% Fin d'une réservation
\newcommand{\cres}[1]{ d_{#1} }
\newcommand{\crese}[1]{ d^{\mathcal{R}}_{#1} }
%% Durée d'une réservation
\newcommand{\pres}[1]{ p_{#1} }
\newcommand{\prese}[1]{ p^{\mathcal{R}}_{#1} }
% Machine de la réservation
\newcommand{\mres}[1]{ M_{#1} }
\newcommand{\mrese}[1]{ M^{\mathcal{R}}_{#1} }
% >>>
% <<< Hole
%% Début d'un trou
\newcommand{\sho}[1]{ r_{#1} }
\newcommand{\shoe}[1]{ r^{\mathcal{H}}_{#1} }
%% Fin d'un trou
\newcommand{\cho}[1]{ d_{#1} }
\newcommand{\choe}[1]{ d^{\mathcal{H}}_{#1} }
%% Durée d'un trou
\newcommand{\pho}[1]{ p_{#1} }
\newcommand{\phoe}[1]{ p^{\mathcal{H}}_{#1} }
% Machine du trou
\newcommand{\mhol}[1]{ M_{#1} }
\newcommand{\mhole}[1]{ M^{\mathcal{H}}_{#1} }
% >>>
% <<< Evénement général
%% Début d'un événement général (tache ou réservation)
\newcommand{\sgen}[1]{ r_{#1} }
%% Fin d'un événement général
\newcommand{\cgen}[1]{ d_{#1} }
%% Durée d'un événement général
\newcommand{\pgen}[1]{ p_{#1} }
% >>>
% <<< Intervalle
%% Début d'un intervalle
\newcommand{\sint}[1]{ s_{#1} }
%% Fin d'un intervalle général
\newcommand{\cint}[1]{ c_{#1} }
%% Durée d'un intervalle
\newcommand{\pint}[1]{ l_{#1} }
% >>>

% <<< Notations
\newcommand{\authmach}[1]{$#1$-\emph{disponible}}
\newcommand{\tphase}[0]{phase}
\newcommand{\nbphase}[0]{k}
\newcommand{\nbevphase}[0]{k}
\newcommand{\iephase}[1]{\mathcal{P}_{#1}}
\newcommand{\nbev}[0]{|\mathcal{E}|}
\newcommandx{\ordpart}[3][2=1]{#1\left[ \iephase{#2}, \iephase{#3} \right]}
% >>>
